train_binary = createDataPartition(y = wine_data$quality_binary, p = 0.7, list = F)
training_binary = wine_data[train_binary, ]
testing_binary = wine_data[-train_binary, ]
gbm_grid =  expand.grid(
interaction.depth = 30,
n.trees = 250,
shrinkage = 0.01,
n.minobsinnode = 3
)
control_binary <- trainControl(method = "cv",
number = 2, #Making a simple cv for speed here
search="grid",
summaryFunction = twoClassSummary,
classProbs = TRUE,
allowParallel = TRUE
)
training_binary$quality_binary <- as.factor(training_binary$quality_binary)
levels(training_binary$quality_binary) <- c("Bad", "Good")
testing_binary$quality_binary <- as.factor(testing_binary$quality_binary)
levels(testing_binary$quality_binary) <- c("Bad", "Good")
gbm_fit = train(
x = training_binary[, -length(training_binary)],
y = training_binary$quality_binary,
method = "gbm",
trControl = control_binary,
verbose = FALSE,
metric = "ROC",
tuneGrid= gbm_grid
)
# Quantitative measure of variable importance
imp = varImp(gbm_fit)
# As a table
imp
# As a plot
plot(imp)
cluster = makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
start <- proc.time()
grid.arrange(
partial(gbm_fit, pred.var = "alcohol", plot = TRUE, rug = TRUE,
type="classification", prob=TRUE, parallel=T, which.class = "Good", train=training_binary),
partial(gbm_fit, pred.var = "volatile.acidity", plot = TRUE, rug = TRUE,
type="classification", prob=TRUE,parallel=T, which.class="Good",train=training_binary),
ncol = 2
)
start <- proc.time()
grid.arrange(
partial(gbm_fit, pred.var = "alcohol", plot = TRUE, rug = TRUE,
type="classification", prob=TRUE, parallel=T, which.class = "Good", train=training_binary),
partial(gbm_fit, pred.var = "volatile.acidity", plot = TRUE, rug = TRUE,
type="classification", prob=TRUE,parallel=T, which.class="Good",train=training_binary),
ncol = 2
)
# Other part of timing with and without parallel
end <- proc.time() - start
end_time <- as.numeric((paste(end[3])))
end_time
library(readr)
library(tidyverse)
library(plyr)
library(esquisse)
library(ggfortify)
library(seasonal)
library(forecast)
library(lubridate)
library(sqldf)
library(hydroGOF)
transactions <- read_csv("transactions.csv")
sqldf("select count(distinct(customer_id)) from transactions")
count(distinct(customer_id))
transact_date_clean <- transactions
transact_date_clean$date <- as.Date(transact_date_clean$date, "%d/%m/%y")
transact_arranged <- arrange(transact_date_clean,industry,location)
library(readr)
library(tidyverse)
library(plyr)
library(esquisse)
library(ggfortify)
library(seasonal)
library(forecast)
library(lubridate)
library(sqldf)
library(hydroGOF)
transactions <- read_csv("transactions.csv")
setwd("~/dam ass 1")
library(readr)
library(tidyverse)
library(plyr)
library(esquisse)
library(ggfortify)
library(seasonal)
library(forecast)
library(lubridate)
library(sqldf)
library(hydroGOF)
transactions <- read_csv("transactions.csv")
transact_date_clean <- transactions
transact_date_clean$date <- as.Date(transact_date_clean$date, "%d/%m/%y")
transact_arranged <- arrange(transact_date_clean,industry,location)
transact_aggregate <- aggregate(monthly_amount~industry+location+date, data=transact_date_clean,mean)
transact_aggregate$YEAR = year(transact_aggregate$date)
transact_aggregate$MONTH = month(transact_aggregate$date)
transact_aggregate$MONTH = as.factor(transact_aggregate$MONTH)
industry <- list()
location <- list()
R_Square <- list()
Adjusted_R_Square <- list()
predict_december_2016 <- list()
for(i in 1:10)
{
for(j in 1:10)
{
sub_data <- transact_aggregate %>%
filter(industry==i & location==j)
if(nrow(sub_data) > 15)
{
inde = ceiling(nrow(sub_data) * 0.75)
train_inde <- seq_len(inde)
trainset_loop <- sub_data[train_inde,]
testset_loop <- sub_data[-train_inde,]
data.lm.loop = lm(formula = monthly_amount ~ YEAR + MONTH, data = testset_loop)
summary(data.lm.loop)
a <- predict(data.lm.loop, testset_loop)
b <- predict(data.lm.loop, dec_2016)
industry <- append(industry , i)
location <- append(location , j)
R_Square <- append(R_Square , summary(data.lm.loop)$r.squared)
Adjusted_R_Square <- append(Adjusted_R_Square , summary(data.lm.loop)$adj.r.squared)
predict_december_2016 <- append(predict_december_2016 , b)
}
}
}
MONTH <- as.factor(12)
YEAR <- 2016
dec_2016 <- data.frame(YEAR , MONTH)
industry <- list()
location <- list()
R_Square <- list()
Adjusted_R_Square <- list()
predict_december_2016 <- list()
for(i in 1:10)
{
for(j in 1:10)
{
sub_data <- transact_aggregate %>%
filter(industry==i & location==j)
if(nrow(sub_data) > 15)
{
inde = ceiling(nrow(sub_data) * 0.75)
train_inde <- seq_len(inde)
trainset_loop <- sub_data[train_inde,]
testset_loop <- sub_data[-train_inde,]
data.lm.loop = lm(formula = monthly_amount ~ YEAR + MONTH, data = testset_loop)
summary(data.lm.loop)
a <- predict(data.lm.loop, testset_loop)
b <- predict(data.lm.loop, dec_2016)
industry <- append(industry , i)
location <- append(location , j)
R_Square <- append(R_Square , summary(data.lm.loop)$r.squared)
Adjusted_R_Square <- append(Adjusted_R_Square , summary(data.lm.loop)$adj.r.squared)
predict_december_2016 <- append(predict_december_2016 , b)
}
}
}
industry <- list()
location <- list()
R_Square <- list()
Adjusted_R_Square <- list()
predict_december_2016 <- list()
for(i in 1:10)
{
for(j in 1:10)
{
sub_data <- transact_aggregate %>%
filter(industry==i & location==j)
if(nrow(sub_data) > 20)
{
inde = ceiling(nrow(sub_data) * 0.75)
train_inde <- seq_len(inde)
trainset_loop <- sub_data[train_inde,]
testset_loop <- sub_data[-train_inde,]
data.lm.loop = lm(formula = monthly_amount ~ YEAR + MONTH, data = testset_loop)
summary(data.lm.loop)
a <- predict(data.lm.loop, testset_loop)
b <- predict(data.lm.loop, dec_2016)
industry <- append(industry , i)
location <- append(location , j)
R_Square <- append(R_Square , summary(data.lm.loop)$r.squared)
Adjusted_R_Square <- append(Adjusted_R_Square , summary(data.lm.loop)$adj.r.squared)
predict_december_2016 <- append(predict_december_2016 , b)
}
}
}
industry <- list()
location <- list()
R_Square <- list()
Adjusted_R_Square <- list()
pred_dec_2016 <- list()
for(i in 1:10)
{
for(j in 1:10)
{
test <- transact_aggregate %>%
filter(industry==i & location==j)
if(nrow(test) > 15)
{
ind = ceiling(nrow(test) * 0.75)
train_ind <- seq_len(ind)
trainset <- test[train_ind,]
testset <- test[-train_ind,]
data.lm = lm(formula = monthly_amount ~ YEAR + MONTH, data = trainset)
summary(data.lm)
a <- predict(data.lm, testset)
b <- predict(data.lm, dec_2016)
industry <- append(industry , i)
location <- append(location , j)
R_Square <- append(R_Square , summary(data.lm)$r.squared)
Adjusted_R_Square <- append(Adjusted_R_Square , summary(data.lm)$adj.r.squared)
pred_dec_2016 <- append(pred_dec_2016 , b)
}
}
}
yan <- as.data.frame(do.call(rbind, Map(data.frame, A=industry, B=location , C=R_Square, D=Adjusted_R_Square , E = pred_dec_2016)))
View(yan)
industry <- list()
location <- list()
R_Square <- list()
Adjusted_R_Square <- list()
pred_dec_2016 <- list()
for(i in 1:10)
{
for(j in 1:10)
{
filt <- transact_aggregate %>%
filter(industry==i & location==j)
if(nrow(filt) > 15)
{
ind = ceiling(nrow(filt) * 0.75)
train_ind <- seq_len(ind)
trainset <- filt[train_ind,]
testset <- filt[-train_ind,]
data.lm = lm(formula = monthly_amount ~ YEAR + MONTH, data = trainset)
summary(data.lm)
a <- predict(data.lm, testset)
b <- predict(data.lm, dec_2016)
industry <- append(industry , i)
location <- append(location , j)
R_Square <- append(R_Square , summary(data.lm)$r.squared)
Adjusted_R_Square <- append(Adjusted_R_Square , summary(data.lm)$adj.r.squared)
pred_dec_2016 <- append(pred_dec_2016 , b)
}
}
}
yan <- as.data.frame(do.call(rbind, Map(data.frame, A=industry, B=location , C=R_Square, D=Adjusted_R_Square , E = pred_dec_2016)))
eval_metrics <- as.data.frame(do.call(rbind, Map(data.frame, A=industry, B=location , C=R_Square, D=Adjusted_R_Square , E = pred_dec_2016)))
View(eval_metrics)
View(eval_metrics)
***********************************************************************************
test_pred_add1 <- list(a)
test_prediction1 <- as.data.frame(test_pred_add1)
names(test_prediction1)[1] <- "Test_Prediction"
test_actual_pred <- cbind(testset , test_prediction1)
rmse <- hydroGOF::rmse(test_actual_pred$Test_Prediction, test_actual_pred$monthly_amount )
rmse
test_prediction1
test_actual_pred
***********************************************************************************
test_pred_add1 <- list(a)
test_prediction1 <- as.data.frame(test_pred_add1)
names(test_prediction1)[1] <- "Test_Prediction"
test_actual_pred1 <- cbind(testset , test_prediction1)
rmse <- hydroGOF::rmse(test_actual_pred1$Test_Prediction, test_actual_pred1$monthly_amount )
rmse
industry <- list()
location <- list()
R_Square <- list()
Adjusted_R_Square <- list()
RMSE_Error <- list()
pred_dec_2016 <- list()
for(i in 1:10)
{
for(j in 1:10)
{
filt <- transact_aggregate %>%
filter(industry==i & location==j)
if(nrow(filt) > 15)
{
ind = ceiling(nrow(filt) * 0.75)
train_ind <- seq_len(ind)
trainset <- filt[train_ind,]
testset <- filt[-train_ind,]
data.lm = lm(formula = monthly_amount ~ YEAR + MONTH, data = trainset)
summary(data.lm)
a <- predict(data.lm, testset)
b <- predict(data.lm, dec_2016)
***********************************************************************************
test_pred_add1 <- list(a)
test_prediction1 <- as.data.frame(test_pred_add1)
names(test_prediction1)[1] <- "Test_Prediction"
test_actual_pred1 <- cbind(testset , test_prediction1)
rmse <- hydroGOF::rmse(test_actual_pred1$Test_Prediction, test_actual_pred1$monthly_amount )
*************************************************************************************
industry <- append(industry , i)
location <- append(location , j)
R_Square <- append(R_Square , summary(data.lm)$r.squared)
Adjusted_R_Square <- append(Adjusted_R_Square , summary(data.lm)$adj.r.squared)
RMSE_Error <- append(RMSE_Error , rmse)
pred_dec_2016 <- append(pred_dec_2016 , b)
}
}
}
industry <- list()
location <- list()
R_Square <- list()
Adjusted_R_Square <- list()
RMSE_Error <- list()
pred_dec_2016 <- list()
for(i in 1:10)
{
for(j in 1:10)
{
filt <- transact_aggregate %>%
filter(industry==i & location==j)
if(nrow(filt) > 15)
{
ind = ceiling(nrow(filt) * 0.75)
train_ind <- seq_len(ind)
trainset <- filt[train_ind,]
testset <- filt[-train_ind,]
data.lm = lm(formula = monthly_amount ~ YEAR + MONTH, data = trainset)
summary(data.lm)
a <- predict(data.lm, testset)
b <- predict(data.lm, dec_2016)
***********************************************************************************
test_pred_add1 <- list(a)
test_prediction1 <- as.data.frame(test_pred_add1)
names(test_prediction1)[1] <- "Test_Prediction"
test_actual_pred1 <- cbind(testset , test_prediction1)
rmse <- hydroGOF::rmse(test_actual_pred1$Test_Prediction, test_actual_pred1$monthly_amount )
*************************************************************************************
industry <- append(industry , i)
location <- append(location , j)
R_Square <- append(R_Square , summary(data.lm)$r.squared)
Adjusted_R_Square <- append(Adjusted_R_Square , summary(data.lm)$adj.r.squared)
RMSE_Error <- append(RMSE_Error , rmse)
pred_dec_2016 <- append(pred_dec_2016 , b)
}
}
}
industry <- list()
location <- list()
R_Square <- list()
Adjusted_R_Square <- list()
RMSE_Error <- list()
pred_dec_2016 <- list()
for(i in 1:10)
{
for(j in 1:10)
{
filt <- transact_aggregate %>%
filter(industry==i & location==j)
if(nrow(filt) > 15)
{
ind = ceiling(nrow(filt) * 0.75)
train_ind <- seq_len(ind)
trainset <- filt[train_ind,]
testset <- filt[-train_ind,]
data.lm = lm(formula = monthly_amount ~ YEAR + MONTH, data = trainset)
summary(data.lm)
a <- predict(data.lm, testset)
b <- predict(data.lm, dec_2016)
test_pred_add1 <- list(a)
test_prediction1 <- as.data.frame(test_pred_add1)
names(test_prediction1)[1] <- "Test_Prediction"
test_actual_pred1 <- cbind(testset , test_prediction1)
rmse <- hydroGOF::rmse(test_actual_pred1$Test_Prediction, test_actual_pred1$monthly_amount )
industry <- append(industry , i)
location <- append(location , j)
R_Square <- append(R_Square , summary(data.lm)$r.squared)
Adjusted_R_Square <- append(Adjusted_R_Square , summary(data.lm)$adj.r.squared)
RMSE_Error <- append(RMSE_Error , rmse)
pred_dec_2016 <- append(pred_dec_2016 , b)
}
}
}
RMSE_Error
eval_metrics <- as.data.frame(do.call(rbind, Map(data.frame, A=industry, B=location , C=R_Square, D=Adjusted_R_Square , E = RMSE_Error, F =pred_dec_2016)))
View(eval_metrics)
Evaluation_metrics <- rename(eval_metrics,A=industry, B=location , C=R_Square, D=Adjusted_R_Square , E = RMSE_Error, F = pred_dec_2016)
eval_metrics <- rename(eval_metrics,A=industry, B=location , C=R_Square, D=Adjusted_R_Square , E = RMSE_Error, F = pred_dec_2016)
names(eval_metrics)[1] <- "Industry"
names(eval_metrics)[2] <- "Location"
names(eval_metrics)[3] <- "R_Square"
names(eval_metrics)[4] <- "Adjusted_R_Square"
names(eval_metrics)[5] <- "RMSE_Error"
names(eval_metrics)[6] <- "pred_dec_2016"
View(test_actual_pred1)
test_actual_pred2 <- rbind(test_actual_pred1 , test_prediction1)
test_actual_pred1
Industry_new <- append(Industry_new , industry)
Industry_new <- list()
location_new <- list()
prediction_123 <- list()
actual_123 <- list()
Industry_new <- append(Industry_new , industry)
Industry_new
Industry_new <- list()
location_new <- list()
prediction_123 <- list()
actual_123 <- list()
Industry_new <- append(Industry_new , test_actual_pred1$industry)
Industry_new
location_new <- append(location_new , test_actual_pred1$location)
location_new
Industry_new <- list()
location_new <- list()
prediction_123 <- list()
actual_123 <- list()
Industry_new <- append(Industry_new , test_actual_pred1$industry)
location_new <- append(location_new , test_actual_pred1$location)
prediction_123 <- append(prediction_123 , test_actual_pred1$Test_Prediction)
actual_123 <- append(actual_123 , test_actual_pred1$monthly_amount)
date_123 <- list()
date_123 <- append(date_123, test_actual_pred1$date)
pred_actual_diff <- as.data.frame(do.call(rbind, Map(data.frame, A=date_123, B=Industry_new , C=location_new, D=prediction_123 , E = actual_123)))
View(pred_actual_diff)
names(pred_actual_diff)[1] <- "Date"
names(pred_actual_diff)[2] <- "Industry"
names(pred_actual_diff)[3] <- "Location"
names(pred_actual_diff)[4] <- "Prediction"
names(eval_metrics)[5] <- "Actual_Value"
names(pred_actual_diff)[1] <- "Date"
names(pred_actual_diff)[2] <- "Industry"
names(pred_actual_diff)[3] <- "Location"
names(pred_actual_diff)[4] <- "Prediction"
names(eval_metrics)[5] <- "Actual_Value"
pred_actual_diff <- as.data.frame(do.call(rbind, Map(data.frame, A=date_123, B=Industry_new , C=location_new, D=prediction_123 , E = actual_123)))
names(pred_actual_diff)[1] <- "Date"
names(pred_actual_diff)[2] <- "Industry"
names(pred_actual_diff)[3] <- "Location"
names(pred_actual_diff)[4] <- "Prediction"
names(pred_actual_diff)[5] <- "Actual_Value"
pred_actual_diff&difference <- pred_actual_diff$Prediction - pred_actual_diff$Actual_Value
pred_actual_diff&difference <- pred_actual_diff$Prediction - pred_actual_diff$Actual_Value
pred_actual_diff&difference = pred_actual_diff$Prediction - pred_actual_diff$Actual_Value
pred_actual_diff$difference = pred_actual_diff$Prediction - pred_actual_diff$Actual_Value
Industry_new <- list()
location_new <- list()
prediction_123 <- list()
actual_123 <- list()
date_123 <- list()
industry <- list()
location <- list()
R_Square <- list()
Adjusted_R_Square <- list()
RMSE_Error <- list()
pred_dec_2016 <- list()
for(i in 1:10)
{
for(j in 1:10)
{
filt <- transact_aggregate %>%
filter(industry==i & location==j)
if(nrow(filt) > 15)
{
ind = ceiling(nrow(filt) * 0.75)
train_ind <- seq_len(ind)
trainset <- filt[train_ind,]
testset <- filt[-train_ind,]
data.lm = lm(formula = monthly_amount ~ YEAR + MONTH, data = trainset)
summary(data.lm)
a <- predict(data.lm, testset)
b <- predict(data.lm, dec_2016)
test_pred_add1 <- list(a)
test_prediction1 <- as.data.frame(test_pred_add1)
names(test_prediction1)[1] <- "Test_Prediction"
test_actual_pred1 <- cbind(testset , test_prediction1)
rmse <- hydroGOF::rmse(test_actual_pred1$Test_Prediction, test_actual_pred1$monthly_amount )
Industry_new <- append(Industry_new , test_actual_pred1$industry)
location_new <- append(location_new , test_actual_pred1$location)
prediction_123 <- append(prediction_123 , test_actual_pred1$Test_Prediction)
actual_123 <- append(actual_123 , test_actual_pred1$monthly_amount)
date_123 <- append(date_123, test_actual_pred1$date)
industry <- append(industry , i)
location <- append(location , j)
R_Square <- append(R_Square , summary(data.lm)$r.squared)
Adjusted_R_Square <- append(Adjusted_R_Square , summary(data.lm)$adj.r.squared)
RMSE_Error <- append(RMSE_Error , rmse)
pred_dec_2016 <- append(pred_dec_2016 , b)
}
}
}
val_metrics <- as.data.frame(do.call(rbind, Map(data.frame, A=industry, B=location , C=R_Square, D=Adjusted_R_Square , E = RMSE_Error, F = pred_dec_2016)))
names(eval_metrics)[1] <- "Industry"
names(eval_metrics)[2] <- "Location"
names(eval_metrics)[3] <- "R_Square"
names(eval_metrics)[4] <- "Adjusted_R_Square"
names(eval_metrics)[5] <- "RMSE_Error"
names(eval_metrics)[6] <- "pred_dec_2016"
pred_actual_diff <- as.data.frame(do.call(rbind, Map(data.frame, A=date_123, B=Industry_new , C=location_new, D=prediction_123 , E = actual_123)))
names(pred_actual_diff)[1] <- "Date"
names(pred_actual_diff)[2] <- "Industry"
names(pred_actual_diff)[3] <- "Location"
names(pred_actual_diff)[4] <- "Prediction"
names(pred_actual_diff)[5] <- "Actual_Value"
pred_actual_diff$difference = pred_actual_diff$Prediction - pred_actual_diff$Actual_Value
install.packages("writexl")
library(writexl)
write_xlsx(pred_actual_diff,"C:\Users\Ganesh\Documents\dam ass 1\\pred_actual_diff.xlsx")
write_xlsx(pred_actual_diff,"C:\\Users\Ganesh\Documents\dam ass 1\\pred_actual_diff.xlsx")
write_xlsx(pred_actual_diff,"C:\\Users\\Ganesh\\Documents\\dam ass 1\\pred_actual_diff.xlsx")
write_xlsx(pred_actual_diff,"C:\\Users\\Ganesh\\Documents\\dam ass 1\\eval_metrics.xlsx")
